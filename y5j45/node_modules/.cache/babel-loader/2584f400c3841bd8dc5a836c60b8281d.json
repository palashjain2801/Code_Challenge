{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\jainp\\\\Desktop\\\\work_Space\\\\codingchallenge\\\\y5j45\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\jainp\\\\Desktop\\\\work_Space\\\\codingchallenge\\\\y5j45\\\\src\\\\components\\\\RowSelection.js\";\nimport React, { useMemo, useState, useEffect } from \"react\";\nimport { useTable, useRowSelect } from \"react-table\";\nimport { COLUMNS } from \"./columns\";\nimport \"./table.css\";\nimport { Checkbox } from \"./Checkbox\";\nexport const RowSelection = () => {\n  const columns = useMemo(() => COLUMNS, []);\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        row = _useState4[0],\n        setrow = _useState4[1];\n\n  const fetchDataFromLink = link => {\n    //TODO fetch link, should be an Array\n    //return array of string\n    //https://cors-anywhere.herokuapp.com/https://sahmed93846.api-us1.com/api/3/contacts/193/contactTags\n    fetch(\"https://cors-anywhere.herokuapp.com/\" + link, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Api-Token\": \"bcd062dedabcd0f1ac8a568cdcf58660c44d7e79b91763cc1a5d0c03d52c522d851fceb0\"\n      }\n    }).then(res => res.json()).then(response => {\n      console.log(\"ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥\", response);\n      return response; //setData(response.contacts);\n    }).catch(err => {\n      console.error(err);\n    });\n  };\n\n  const preProcessData = data => {\n    let newData = {};\n    let keysToBeFetched = [\"ContactTags\", \"Deals\"];\n\n    for (let key in Object.keys(data)) {\n      if (key == \"links\") {\n        //= fetchDataFromLink(data[key])\n        //deflate newData\n        for (let linkName in Object.keys(data[key])) {\n          if (keysToBeFetched.includes(linkName)) {\n            newData[key][linkName] = fetchDataFromLink(data[key][linkName]);\n          }\n        }\n      } else {\n        newData[key] = data[key];\n      }\n    }\n\n    return newData;\n  };\n\n  useEffect(() => {\n    fetch(\"/api/3/contacts\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Api-Token\": \"bcd062dedabcd0f1ac8a568cdcf58660c44d7e79b91763cc1a5d0c03d52c522d851fceb0\"\n      }\n    }).then(res => res.json()).then(response => {\n      console.log(response.contacts);\n      let newData = preProcessData(response.contacts);\n      setData(newData);\n    }).catch(err => {\n      console.error(err);\n    });\n  }, []);\n\n  const _useTable = useTable({\n    columns,\n    data\n  }, useRowSelect, hooks => {\n    hooks.visibleColumns.push(columns => [{\n      id: \"selection\",\n      Header: ({\n        getToggleAllRowsSelectedProps\n      }) => /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, getToggleAllRowsSelectedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }\n      })),\n      Cell: ({\n        row\n      }) => /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, row.getToggleRowSelectedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 30\n        }\n      }))\n    }, ...columns]);\n  }),\n        getTableProps = _useTable.getTableProps,\n        getTableBodyProps = _useTable.getTableBodyProps,\n        headerGroups = _useTable.headerGroups,\n        rows = _useTable.rows,\n        prepareRow = _useTable.prepareRow,\n        selectedFlatRows = _useTable.selectedFlatRows;\n\n  const firstPageRows = rows.slice(0, 10);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }), headerGroup.headers.map(column => /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }), column.render(\"Header\")))))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), firstPageRows.map(row => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 15\n      }\n    }), row.cells.map(cell => {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }\n      }), cell.render(\"Cell\"));\n    }));\n  }))), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, JSON.stringify({\n    selectedFlatRows: selectedFlatRows.map(row => row.original)\n  }, null, 2))));\n};","map":{"version":3,"sources":["C:/Users/jainp/Desktop/work_Space/codingchallenge/y5j45/src/components/RowSelection.js"],"names":["React","useMemo","useState","useEffect","useTable","useRowSelect","COLUMNS","Checkbox","RowSelection","columns","data","setData","row","setrow","fetchDataFromLink","link","fetch","headers","then","res","json","response","console","log","catch","err","error","preProcessData","newData","keysToBeFetched","key","Object","keys","linkName","includes","contacts","hooks","visibleColumns","push","id","Header","getToggleAllRowsSelectedProps","Cell","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","selectedFlatRows","firstPageRows","slice","map","headerGroup","getHeaderGroupProps","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps","JSON","stringify","original"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useEffect } from \"react\";\r\nimport { useTable, useRowSelect } from \"react-table\";\r\nimport { COLUMNS } from \"./columns\";\r\nimport \"./table.css\";\r\nimport { Checkbox } from \"./Checkbox\";\r\n\r\nexport const RowSelection = () => {\r\n  const columns = useMemo(() => COLUMNS, []);\r\n  const [data, setData] = useState([]);\r\n  const [row, setrow] = useState([]);\r\n  const fetchDataFromLink = (link) => {\r\n    //TODO fetch link, should be an Array\r\n    //return array of string\r\n\r\n    //https://cors-anywhere.herokuapp.com/https://sahmed93846.api-us1.com/api/3/contacts/193/contactTags\r\n    fetch(\"https://cors-anywhere.herokuapp.com/\" + link, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Api-Token\":\r\n          \"bcd062dedabcd0f1ac8a568cdcf58660c44d7e79b91763cc1a5d0c03d52c522d851fceb0\"\r\n      }\r\n    })\r\n      .then((res) => res.json())\r\n      .then((response) => {\r\n        console.log(\"ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥\", response);\r\n        return response;\r\n        //setData(response.contacts);\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  };\r\n\r\n  const preProcessData = (data) => {\r\n    let newData = {};\r\n    let keysToBeFetched = [\"ContactTags\", \"Deals\"];\r\n    for (let key in Object.keys(data)) {\r\n      if (key == \"links\") {\r\n        //= fetchDataFromLink(data[key])\r\n        //deflate newData\r\n        for (let linkName in Object.keys(data[key])) {\r\n          if (keysToBeFetched.includes(linkName)) {\r\n            newData[key][linkName] = fetchDataFromLink(data[key][linkName]);\r\n          }\r\n        }\r\n      } else {\r\n        newData[key] = data[key];\r\n      }\r\n    }\r\n    return newData;\r\n  };\r\n\r\n  useEffect(() => {\r\n      fetch(\r\n        \"/api/3/contacts\",\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Api-Token\":\r\n              \"bcd062dedabcd0f1ac8a568cdcf58660c44d7e79b91763cc1a5d0c03d52c522d851fceb0\"\r\n          }\r\n        }\r\n      )\r\n      .then((res) => res.json())\r\n      .then((response) => {\r\n        console.log(response.contacts);\r\n        let newData = preProcessData(response.contacts);\r\n        setData(newData);\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  }, []);\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    selectedFlatRows\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data\r\n    },\r\n    useRowSelect,\r\n    (hooks) => {\r\n      hooks.visibleColumns.push((columns) => [\r\n        {\r\n          id: \"selection\",\r\n          Header: ({ getToggleAllRowsSelectedProps }) => (\r\n            <Checkbox {...getToggleAllRowsSelectedProps()} />\r\n          ),\r\n          Cell: ({ row }) => <Checkbox {...row.getToggleRowSelectedProps()} />\r\n        },\r\n        ...columns\r\n      ]);\r\n    }\r\n  );\r\n\r\n  const firstPageRows = rows.slice(0, 10);\r\n\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {firstPageRows.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <pre>\r\n        <code>\r\n          {JSON.stringify(\r\n            {\r\n              selectedFlatRows: selectedFlatRows.map((row) => row.original)\r\n            },\r\n            null,\r\n            2\r\n          )}\r\n        </code>\r\n      </pre>\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}