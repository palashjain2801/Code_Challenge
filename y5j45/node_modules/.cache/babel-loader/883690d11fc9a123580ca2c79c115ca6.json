{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\jainp\\\\Desktop\\\\work_Space\\\\codingchallenge\\\\y5j45\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\jainp\\\\Desktop\\\\work_Space\\\\codingchallenge\\\\y5j45\\\\src\\\\components\\\\RowSelection.js\";\nimport React, { useMemo, useState, useEffect } from \"react\";\nimport { useTable, useRowSelect } from \"react-table\";\nimport { COLUMNS } from \"./columns\";\nimport \"./table.css\";\nimport { Checkbox } from \"./Checkbox\";\nexport const RowSelection = () => {\n  const columns = useMemo(() => COLUMNS, []);\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const getfetcheddata = (urlextn, reqvalue) => {\n    console.log(\"👉👉👉\", urlextn);\n    fetch(\"https://cors-anywhere.herokuapp.com/\" + urlextn, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Api-Token\": \"bcd062dedabcd0f1ac8a568cdcf58660c44d7e79b91763cc1a5d0c03d52c522d851fceb0\"\n      }\n    }).then(res => res.json()).then(response => {\n      console.log(response.reqvalue);\n    }).catch(err => {\n      console.error(err);\n    });\n  };\n\n  const getData = fordataurl => {\n    Object.keys(fordataurl).map(key => {\n      const ids = fordataurl.id;\n\n      if (key === \"firstName\") {\n        console.log(\"1️⃣\", fordataurl.firstName);\n      }\n\n      if (key === \"lastName\") {\n        console.log(\"🌜\", fordataurl.lastName);\n      }\n\n      if (key === \"id\") {\n        console.log(\"🆔\", fordataurl.id);\n      }\n\n      if (key === \"links\") {\n        console.log(Object.keys(fordataurl[key]));\n        Object.keys(fordataurl[key]).map(linkkey => {\n          if (linkkey === \"contactTags\") {\n            console.log(fordataurl[key].contactTags);\n          }\n\n          if (linkkey === \"deals\") {\n            console.log(fordataurl[key].deals);\n            const ext = \"api/3/deals/\" + ids;\n            getfetcheddata(ext, \"value\");\n          }\n\n          if (linkkey === \"geoIps\") {\n            console.log(fordataurl[key].geoIps);\n          }\n        });\n      }\n    });\n  };\n\n  useEffect(() => {\n    fetch(\"/api/3/contacts\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Api-Token\": \"bcd062dedabcd0f1ac8a568cdcf58660c44d7e79b91763cc1a5d0c03d52c522d851fceb0\"\n      }\n    }).then(res => res.json()).then(response => {\n      console.log(response.contacts); // let newData = preprocessData(response.contacts);\n      // console.log(\"Processed DATA:\" + newData);\n\n      setData(response.contacts);\n      console.log(\"🔥🔥🔥\", typeof response.contacts);\n      Object.values(response.contacts).map(linkname => {\n        // console.log(linkname)\n        getData(linkname);\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }, []);\n\n  const _useTable = useTable({\n    columns,\n    data\n  }, useRowSelect, hooks => {\n    hooks.visibleColumns.push(columns => [{\n      id: \"selection\",\n      Header: ({\n        getToggleAllRowsSelectedProps\n      }) => /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, getToggleAllRowsSelectedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }\n      })),\n      Cell: ({\n        row\n      }) => /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, row.getToggleRowSelectedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 30\n        }\n      }))\n    }, ...columns]);\n  }),\n        getTableProps = _useTable.getTableProps,\n        getTableBodyProps = _useTable.getTableBodyProps,\n        headerGroups = _useTable.headerGroups,\n        rows = _useTable.rows,\n        prepareRow = _useTable.prepareRow,\n        selectedFlatRows = _useTable.selectedFlatRows;\n\n  const firstPageRows = rows.slice(0, 10);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }), headerGroup.headers.map(column => /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }), column.render(\"Header\")))))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }), firstPageRows.map(row => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    }), row.cells.map(cell => {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }\n      }), cell.render(\"Cell\"));\n    }));\n  }))), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, JSON.stringify({\n    selectedFlatRows: selectedFlatRows.map(row => row.original)\n  }, null, 2))));\n};","map":{"version":3,"sources":["C:/Users/jainp/Desktop/work_Space/codingchallenge/y5j45/src/components/RowSelection.js"],"names":["React","useMemo","useState","useEffect","useTable","useRowSelect","COLUMNS","Checkbox","RowSelection","columns","data","setData","getfetcheddata","urlextn","reqvalue","console","log","fetch","headers","then","res","json","response","catch","err","error","getData","fordataurl","Object","keys","map","key","ids","id","firstName","lastName","linkkey","contactTags","deals","ext","geoIps","contacts","values","linkname","hooks","visibleColumns","push","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","selectedFlatRows","firstPageRows","slice","headerGroup","getHeaderGroupProps","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps","JSON","stringify","original"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useEffect } from \"react\";\r\nimport { useTable, useRowSelect } from \"react-table\";\r\nimport { COLUMNS } from \"./columns\";\r\nimport \"./table.css\";\r\nimport { Checkbox } from \"./Checkbox\";\r\n\r\nexport const RowSelection = () => {\r\n  const columns = useMemo(() => COLUMNS, []);\r\n  const [data, setData] = useState([]);\r\n  \r\n\r\nconst getfetcheddata = (urlextn, reqvalue) =>{\r\n  console.log(\"👉👉👉\",urlextn)\r\n  fetch(\r\n    \"https://cors-anywhere.herokuapp.com/\" + urlextn,\r\n    {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Api-Token\":\r\n          \"bcd062dedabcd0f1ac8a568cdcf58660c44d7e79b91763cc1a5d0c03d52c522d851fceb0\"\r\n      }\r\n    }\r\n  )\r\n    .then((res) => res.json())\r\n    .then((response) => {\r\n      console.log(response.reqvalue);\r\n\r\n      })\r\n    .catch((err) => {\r\n      console.error(err);\r\n    });\r\n\r\n}\r\n\r\n  const getData = (fordataurl) =>{\r\n    Object.keys(fordataurl).map((key)=>{\r\n      const ids = fordataurl.id;\r\n      if (key === \"firstName\"){\r\n        console.log(\"1️⃣\",fordataurl.firstName);\r\n      }\r\n      if (key === \"lastName\"){\r\n        console.log(\"🌜\",fordataurl.lastName);\r\n      }\r\n      if (key === \"id\"){\r\n        console.log(\"🆔\",fordataurl.id);\r\n      }\r\n      if (key === \"links\"){\r\n        console.log(Object.keys(fordataurl[key]))\r\n        Object.keys(fordataurl[key]).map((linkkey)=>{\r\n          if (linkkey===\"contactTags\"){\r\n            console.log(fordataurl[key].contactTags)\r\n          }\r\n\r\n          if (linkkey===\"deals\"){\r\n            console.log(fordataurl[key].deals)\r\n            const ext = \"api/3/deals/\" + ids\r\n            getfetcheddata(ext,\"value\")\r\n          }\r\n          if (linkkey===\"geoIps\"){\r\n            console.log(fordataurl[key].geoIps)\r\n          }\r\n        })\r\n\r\n\r\n      }\r\n\r\n    })\r\n\r\n  }\r\n \r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      \"/api/3/contacts\",\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Api-Token\":\r\n            \"bcd062dedabcd0f1ac8a568cdcf58660c44d7e79b91763cc1a5d0c03d52c522d851fceb0\"\r\n        }\r\n      }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((response) => {\r\n        console.log(response.contacts);\r\n        // let newData = preprocessData(response.contacts);\r\n        // console.log(\"Processed DATA:\" + newData);\r\n        setData(response.contacts);\r\n\r\n        console.log(\"🔥🔥🔥\", typeof(response.contacts));\r\n        Object.values(response.contacts).map((linkname)=>{\r\n            // console.log(linkname)\r\n            getData(linkname)\r\n\r\n\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  }, []);\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    selectedFlatRows\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data\r\n    },\r\n    useRowSelect,\r\n    (hooks) => {\r\n      hooks.visibleColumns.push((columns) => [\r\n        {\r\n          id: \"selection\",\r\n          Header: ({ getToggleAllRowsSelectedProps }) => (\r\n            <Checkbox {...getToggleAllRowsSelectedProps()} />\r\n          ),\r\n          Cell: ({ row }) => <Checkbox {...row.getToggleRowSelectedProps()} />\r\n        },\r\n        ...columns\r\n      ]);\r\n    }\r\n  );\r\n\r\n  const firstPageRows = rows.slice(0, 10);\r\n\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {firstPageRows.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <pre>\r\n        <code>\r\n          {JSON.stringify(\r\n            {\r\n              selectedFlatRows: selectedFlatRows.map((row) => row.original)\r\n            },\r\n            null,\r\n            2\r\n          )}\r\n        </code>\r\n      </pre>\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}