{"version":3,"sources":["components/columns.js","components/Checkbox.js","components/RowSelection.js","App.js","index.js"],"names":["COLUMNS","Header","accessor","Checkbox","React","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","type","RowSelection","columns","useMemo","useState","data","setData","getfetcheddata","urlextn","reqvalue","callback","dataFromServer","fetch","proxy","headers","then","response","ok","json","console","log","catch","err","error","contactObject","a","constructedRow","Object","keys","map","key","id","linkLabel","contactTags","constructedTagString","length","forEach","contactTag","index","ext","tag","String","deals","constructedDealString","deal","value","currency","geoIps","constructedGeoString","geoIp","location","city","state","country","contactsList","res","values","contacts","rawContactRow","constructSingleRow","singleRowData","push","setTimeout","useTable","useRowSelect","hooks","visibleColumns","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","selectedFlatRows","firstPageRows","slice","headerGroup","getHeaderGroupProps","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps","JSON","stringify","original","App","rootElement","document","getElementById","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.e1ed491a.chunk.js","sourcesContent":["export const COLUMNS = [\r\n  //contact name, contact tags, deals, total value with currency and location,\r\n  {\r\n    Header: \"ID\",\r\n    accessor: \"id\"\r\n  },\r\n  {\r\n    Header: \"First Name\",\r\n    accessor: \"firstName\"\r\n  },\r\n  {\r\n    Header: \"Last Name\",\r\n    accessor: \"lastName\"\r\n  },\r\n  {\r\n    Header: \"Contact Tags\",\r\n    accessor: \"contactTags\"\r\n  },\r\n  {\r\n    Header: \"deals\",\r\n    accessor: \"deals\"\r\n  },\r\n  {\r\n    Header: \"total\",\r\n    accessor: \"total\"\r\n  },\r\n  {\r\n    Header: \"location\",\r\n    accessor: \"geoIps\"\r\n  }\r\n];\r\n","import React from 'react'\r\n\r\nexport const Checkbox = React.forwardRef(({ indeterminate, ...rest }, ref) => {\r\n  const defaultRef = React.useRef()\r\n  const resolvedRef = ref || defaultRef\r\n\r\n  React.useEffect(() => {\r\n    resolvedRef.current.indeterminate = indeterminate\r\n  }, [resolvedRef, indeterminate])\r\n\r\n  return (\r\n    <>\r\n      <input type='checkbox' ref={resolvedRef} {...rest} />\r\n    </>\r\n  )\r\n})\r\n","import React, { useMemo, useState, useEffect } from \"react\";\r\nimport { useTable, useRowSelect } from \"react-table\";\r\nimport { COLUMNS } from \"./columns\";\r\nimport \"./table.css\";\r\nimport { Checkbox } from \"./Checkbox\";\r\nimport { resolvePlugin } from \"@babel/core\";\r\nimport { sync } from \"glob\";\r\n\r\nexport const RowSelection = () => {\r\n  const columns = useMemo(() => COLUMNS, []);\r\n  const [data, setData] = useState([]);\r\n  const [prevState, setState] = React.useState([]);\r\n  const [row, setrow] = useState([])\r\n  const proxyServers = [\"https://cors-anywhere.herokuapp.com/\",\"https://crossorigin.me/\",\"http://localhost:8080/\"];\r\n  const proxy = proxyServers[0];\r\n  const getfetcheddata = (urlextn, reqvalue,callback) => {\r\n    // console.log(\"ðŸ‘‰ðŸ‘‰ðŸ‘‰\", urlextn)\r\n    let dataFromServer = \"\";\r\n   fetch(\r\n      proxy + \"https://sahmed93846.api-us1.com/\" + urlextn,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Api-Token\":\r\n            \"bcd062dedabcd0f1ac8a568cdcf58660c44d7e79b91763cc1a5d0c03d52c522d851fceb0\"\r\n        }\r\n      }\r\n    )\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          console.log(\"Error Fetching DataFrom Link: \" + urlextn);\r\n          // console.log(response);\r\n        }else{\r\n          return response.json()\r\n        }\r\n      })\r\n      .then((json) => {\r\n        if (json[reqvalue]) {\r\n          // console.log(json[reqvalue]);\r\n\r\n          dataFromServer = json[reqvalue];\r\n          callback(dataFromServer);\r\n        }\r\n\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n\r\n\r\n  }\r\n\r\n  async function constructSingleRow (contactObject,callback) {\r\n    let constructedRow = {};\r\n    Object.keys(contactObject).map((key) => {\r\n      const id = contactObject.id;\r\n      constructedRow[key] = contactObject[key]\r\n      if (key === \"links\") {\r\n        Object.keys(contactObject[key]).map((linkLabel) => {\r\n          if (linkLabel === \"contactTags\") {\r\n            const ext = \"api/3/contacts/\" + id + \"/contactTags\"\r\n            getfetcheddata(ext, \"contactTags\",setContactTag)\r\n            function setContactTag(contactTags){\r\n              let constructedTagString = \"\"\r\n              if (contactTags && contactTags.length > 0) {\r\n                contactTags.forEach((contactTag, index) => {\r\n                  const ext = \"api/3/contactTags/\" + contactTag.id + \"/tag\";\r\n                   getfetcheddata(ext, \"tag\",setTag)\r\n                  function setTag(tag){\r\n                    constructedTagString = constructedTagString + tag.tag;\r\n                    if (index < contactTags.length - 1) { constructedTagString += \",\" }\r\n                    constructedRow[\"contactTags\"] = String(constructedTagString);\r\n\r\n                  }\r\n                  \r\n                });\r\n              }\r\n            }\r\n            \r\n          }\r\n          if (linkLabel === \"deals\") {\r\n            // console.log(contactObject[key].deals)\r\n            const ext = \"api/3/contacts/\" + id + \"/deals\"\r\n            getfetcheddata(ext, \"deals\",setDeals)\r\n            \r\n            function setDeals(deals){\r\n                \r\n                let constructedDealString = \"\"\r\n                if (deals && deals.length > 0) {\r\n                  deals.forEach((deal, index) => {\r\n                    constructedDealString = constructedDealString + deal.value + \" \" + deal.currency;\r\n                    if (index < deals.length - 1)\r\n                      constructedDealString += \",\";\r\n                  });\r\n                }\r\n                constructedRow[\"total\"] = String(constructedDealString);\r\n                constructedRow[\"deals\"] = String(deals.length);\r\n            }\r\n            \r\n          }\r\n          if (linkLabel === \"geoIps\") {\r\n            // console.log(contactObject[key].geoIps)\r\n            const ext = \"api/3/contacts/\" + id + \"/geoIps\"\r\n             getfetcheddata(ext, \"geoIps\",setGeoIp)\r\n            function setGeoIp(geoIps){\r\n              let constructedGeoString = \"\"\r\n              if (geoIps && geoIps.length > 0) {\r\n                constructedGeoString = \"\"\r\n                geoIps.forEach(geoIp=>{\r\n                  const ext = \"api/3/geoIps/\"+geoIp.id+\"/geoAddress\"\r\n                  getfetcheddata(ext, \"geoAddress\",setGeoLocation)\r\n                  function setGeoLocation(location){\r\n                      constructedGeoString+=location.city+\", \"+location.state+\", \"+location.country+\";\"\r\n                      constructedRow[linkLabel] = constructedGeoString;\r\n                  }\r\n                })\r\n                \r\n              }\r\n              \r\n            }\r\n             \r\n          }\r\n        })\r\n\r\n      }\r\n\r\n    })\r\n    // console.log(\"::::::::::::::::::::::constructedRow\");\r\n    // console.log(constructedRow);\r\n    callback(constructedRow);\r\n  }\r\n\r\n\r\n  const getContactsList = () => {\r\n    \r\n  }\r\n  let contactsList=[]\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      \"/api/3/contacts?limit=9\",\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Api-Token\":\r\n            \"bcd062dedabcd0f1ac8a568cdcf58660c44d7e79b91763cc1a5d0c03d52c522d851fceb0\"\r\n        }\r\n      }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((response) => {\r\n        Object.values(response.contacts).map((rawContactRow) => {\r\n          // contactsList.push(constructSingleRow(rawContactRow))\r\n          constructSingleRow(rawContactRow,constructedSingleRow)\r\n          function constructedSingleRow(singleRowData){\r\n          contactsList.push(singleRowData)\r\n          \r\n          // console.log(\"Post SET DATA |||||||||||||||||||||||||||||||||||||\")\r\n          // console.log(data)\r\n        }\r\n        })\r\n\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Failed list Contacts\");\r\n        console.error(err);\r\n      });\r\n      \r\n      setTimeout(()=>{setData(contactsList)},10000)\r\n      },[]);\r\n  // console.log(\"ðŸ‘ŒðŸ‘ŒðŸ‘ŒðŸ‘ŒðŸ‘Œ\", row)\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    selectedFlatRows\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data\r\n    },\r\n    useRowSelect,\r\n    (hooks) => {\r\n      hooks.visibleColumns.push((columns) => [\r\n        {\r\n          id: \"selection\",\r\n          Header: ({ getToggleAllRowsSelectedProps }) => (\r\n            <Checkbox {...getToggleAllRowsSelectedProps()} />\r\n          ),\r\n          Cell: ({ row }) => <Checkbox {...row.getToggleRowSelectedProps()} />\r\n        },\r\n        ...columns\r\n      ]);\r\n    }\r\n  );\r\n\r\n  const firstPageRows = rows.slice(0, 100);\r\n\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {firstPageRows.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <pre>\r\n        <code>\r\n          {JSON.stringify(\r\n            {\r\n              selectedFlatRows: selectedFlatRows.map((row) => row.original)\r\n            },\r\n            null,\r\n            2\r\n          )}\r\n        </code>\r\n      </pre>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport {RowSelection} from \"./components/RowSelection\"\r\n\r\nexport default function App() {\r\n  return <RowSelection/>\r\n\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}